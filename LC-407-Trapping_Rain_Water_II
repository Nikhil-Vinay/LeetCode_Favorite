/* Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.
   Given the following 3x6 height map:
   [
     [1,4,3,1,3,2],
     [3,2,1,3,2,4],
     [2,3,3,2,3,1]
   ]

   Return 4.
*/

class Solution {
public:
    int trapRainWater(vector<vector<int>>& heightMap) {
        int m = heightMap.size();
        if(m < 1) return 0;
        int n = heightMap[0].size();
        
        auto cmp = [](const pair<int, int> &o1, pair<int, int> &o2){
            return o1.first > o2.first;
        };
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> q(cmp); // min heap
        vector<vector<int>> visited(m, vector<int>(n, 0));
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
               if( j == 0 || j == n-1){
                  visited[i][j] = 1;
                  q.push({heightMap[i][j], i*n+j});
               }
            }
        }
        
        for(int i = 0; i < m; i++){
            for(int j = 1; j < n-1; j++){
               if( i == 0 || i == m-1){
                  visited[i][j] = 1;
                  q.push({heightMap[i][j], i*n+j});
               }
            }
        }
        
        vector<vector<int>> dir = {{0,1}, {0,-1}, {1,0}, {-1,0}};
        
        int res = 0;
        
        while(!q.empty()){
            pair<int, int> val = q.top();
            q.pop();
            int row = val.second/n;
            int col = val.second%n;
            int h = val.first;
            
            for(int i = 0; i < 4; i++){
                int x = row + dir[i][0];
                int y = col + dir[i][1];
                
                if(x > 0 && x < m-1 && y > 0 && y < n-1 && visited[x][y] == 0){
                    res += max(0,  h - heightMap[x][y]);
                    visited[x][y] = 1;
                    q.push({max(h, heightMap[x][y]), x*n+y});
                }
            }
        }
        
        return res;
    }
};
