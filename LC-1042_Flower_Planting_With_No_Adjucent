/* You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes the existence of a bidirectional path from garden xi to garden yi. 
In each garden, you want to plant one of 4 types of flowers.

There is no garden that has more than three paths coming into or leaving it.

Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.

Return any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden.  The flower types are denoted 1, 2, 3, or 4.
It is guaranteed an answer exists.

Example:
Input: n = 3, paths = [[1,2],[2,3],[3,1]]
Output: [1,2,3]
*/

class Solution {
public:
     vector<int> gardenNoAdj(int N, vector<vector<int>>& paths) {
        vector<int> res(N, 0);
        vector<vector<int>> g(N);
        
        for(auto& p : paths) {
            g[p[0]-1].push_back(p[1]-1);
            g[p[1]-1].push_back(p[0]-1);
        }
        
        for(int i = 0; i < N; i++) {
            int used = 0;
            for(auto& n : g[i]) used |= 1 << res[n];
            for(int c = 1; c <= 4; c++) {
                if((used >> c & 1) == 0) {
                    res[i] = c;
                    break;
                }
            }
        }
        return res;
    }
    
  
};
